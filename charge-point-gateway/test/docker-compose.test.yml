version: '3.8'

services:
  # Redis服务
  redis-test:
    image: redis:7-alpine
    container_name: redis-test
    ports:
      - "6380:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-test-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - test-network

  # Zookeeper服务（Kafka依赖）
  zookeeper-test:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper-test
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2182:2181"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - test-network

  # Kafka服务
  kafka-test:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-test
    depends_on:
      zookeeper-test:
        condition: service_healthy
    ports:
      - "9093:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-test:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_DELETE_TOPIC_ENABLE: true
      KAFKA_LOG_RETENTION_HOURS: 1
      KAFKA_LOG_SEGMENT_BYTES: 1048576
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - test-network

  # 网关服务（用于E2E测试）
  gateway-test:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: gateway-test
    depends_on:
      redis-test:
        condition: service_healthy
      kafka-test:
        condition: service_healthy
    ports:
      - "8081:8080"  # WebSocket端口
      - "9091:9090"  # Metrics端口
      - "8083:8081"  # Health check端口
    environment:
      # 服务器配置
      SERVER_HOST: "0.0.0.0"
      SERVER_PORT: "8080"
      SERVER_WEBSOCKET_PATH: "/ocpp"
      
      # Redis配置
      REDIS_ADDR: "redis-test:6379"
      REDIS_PASSWORD: ""
      REDIS_DB: "0"
      
      # Kafka配置
      KAFKA_BROKERS: "kafka-test:9092"
      KAFKA_UPSTREAM_TOPIC: "ocpp-events-up-test"
      KAFKA_DOWNSTREAM_TOPIC: "commands-down-test"
      KAFKA_CONSUMER_GROUP: "gateway-consumer-test"
      
      # 日志配置
      LOG_LEVEL: "debug"
      LOG_FORMAT: "console"
      
      # 监控配置
      MONITORING_METRICS_PORT: "9090"
      MONITORING_HEALTH_CHECK_PORT: "8081"
      
      # Pod ID（用于测试）
      POD_ID: "test-pod-1"
    volumes:
      - ../configs/test_config.yaml:/app/config.yaml:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - test-network

  # Kafka管理工具（可选，用于调试）
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui-test
    depends_on:
      - kafka-test
    ports:
      - "8082:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: test-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-test:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper-test:2181
    networks:
      - test-network
    profiles:
      - debug

  # Redis管理工具（可选，用于调试）
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander-test
    depends_on:
      - redis-test
    ports:
      - "8084:8081"
    environment:
      REDIS_HOSTS: "test:redis-test:6379"
    networks:
      - test-network
    profiles:
      - debug

volumes:
  redis-test-data:
    driver: local

networks:
  test-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
