version: '3.8'

services:
  # Redis服务
  redis-test:
    image: redis:7-alpine
    container_name: redis-test
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-test-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - test-network

  # Zookeeper服务（Kafka依赖）
  zookeeper-test:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper-test
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2182:2181"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - test-network

  # Kafka服务
  kafka-test:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-test
    depends_on:
      zookeeper-test:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-test:2181
      # 配置多个监听器：内部容器使用INTERNAL，外部客户端使用EXTERNAL
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-test:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: 1
      KAFKA_LOG_SEGMENT_BYTES: 1048576
      # 确保使用Zookeeper模式
      KAFKA_PROCESS_ROLES: ""
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka-test:9092", "--list"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - test-network

  # 网关服务（用于E2E测试）
  gateway-test:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: gateway-test
    depends_on:
      redis-test:
        condition: service_healthy
      kafka-test:
        condition: service_healthy
    ports:
      - "8081:8080"  # WebSocket端口
      - "9091:9090"  # Metrics端口
      - "8083:8081"  # Health check端口
    environment:
      # 设置运行环境为test
      APP_PROFILE: "test"
      # 关键服务地址环境变量（会覆盖配置文件）
      REDIS_ADDR: "redis-test:6379"
      KAFKA_BROKERS: "kafka-test:29092"
      # 其他配置
      LOG_LEVEL: "debug"
      SERVER_PORT: "8080"
      MONITORING_HEALTH_CHECK_PORT: "8081"
    volumes:
      # 挂载整个configs目录，让应用可以访问所有配置文件
      - ../configs:/app/configs:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - test-network

  # Kafka管理工具（可选，用于调试）
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui-test
    depends_on:
      - kafka-test
    ports:
      - "8082:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: test-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-test:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper-test:2181
    networks:
      - test-network
    profiles:
      - debug

  # Redis管理工具（可选，用于调试）
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander-test
    depends_on:
      - redis-test
    ports:
      - "8084:8081"
    environment:
      REDIS_HOSTS: "test:redis-test:6379"
    networks:
      - test-network
    profiles:
      - debug

  # ==================== 监控服务 ====================
  # 使用 --profile monitoring 启动监控服务

  # Prometheus 监控服务
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: prometheus-test
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ../monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped
    networks:
      - test-network
    profiles:
      - monitoring

  # Grafana 可视化界面
  grafana:
    image: grafana/grafana:10.1.0
    container_name: grafana-test
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ../monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ../monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    restart: unless-stopped
    networks:
      - test-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # Node Exporter (系统指标)
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: node-exporter-test
    ports:
      - "9101:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    networks:
      - test-network
    profiles:
      - monitoring

  # cAdvisor (容器指标)
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: cadvisor-test
    ports:
      - "8085:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    restart: unless-stopped
    networks:
      - test-network
    profiles:
      - monitoring

  # Redis Exporter (Redis指标)
  redis-exporter:
    image: oliver006/redis_exporter:v1.54.0
    container_name: redis-exporter-test
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis-test:6379
    restart: unless-stopped
    networks:
      - test-network
    depends_on:
      - redis-test
    profiles:
      - monitoring

  # Kafka Exporter (Kafka指标)
  kafka-exporter:
    image: danielqsj/kafka-exporter:v1.6.0
    container_name: kafka-exporter-test
    ports:
      - "9308:9308"
    command:
      - '--kafka.server=kafka-test:9092'
    restart: unless-stopped
    networks:
      - test-network
    depends_on:
      - kafka-test
    profiles:
      - monitoring

  # AlertManager (告警管理)
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: alertmanager-test
    ports:
      - "9093:9093"
    volumes:
      - ../monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    restart: unless-stopped
    networks:
      - test-network
    profiles:
      - monitoring

volumes:
  redis-test-data:
    driver: local
  # 监控数据卷
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  alertmanager-data:
    driver: local

networks:
  test-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16
